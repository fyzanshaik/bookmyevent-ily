// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package users

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1 AND is_active = true) as exists
`

func (q *Queries) CheckUserExists(ctx context.Context, db DBTX, email string) (bool, error) {
	row := db.QueryRowContext(ctx, checkUserExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    phone_number,
    name,
    password_hash
) VALUES (
    $1, $2, $3, $4
) RETURNING user_id, email, phone_number, name, password_hash, is_active, created_at, updated_at
`

type CreateUserParams struct {
	Email        string         `json:"email"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	Name         string         `json:"name"`
	PasswordHash string         `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (User, error) {
	row := db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.PhoneNumber,
		arg.Name,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PhoneNumber,
		&i.Name,
		&i.PasswordHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users
SET 
    is_active = false,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, db DBTX, userID uuid.UUID) error {
	_, err := db.ExecContext(ctx, deactivateUser, userID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, phone_number, name, password_hash, is_active, created_at, updated_at FROM users
WHERE email = $1 AND is_active = true
`

func (q *Queries) GetUserByEmail(ctx context.Context, db DBTX, email string) (User, error) {
	row := db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PhoneNumber,
		&i.Name,
		&i.PasswordHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, email, phone_number, name, password_hash, is_active, created_at, updated_at FROM users
WHERE user_id = $1 AND is_active = true
`

func (q *Queries) GetUserByID(ctx context.Context, db DBTX, userID uuid.UUID) (User, error) {
	row := db.QueryRowContext(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PhoneNumber,
		&i.Name,
		&i.PasswordHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    name = COALESCE($2, name),
    phone_number = COALESCE($3, phone_number),
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1 AND is_active = true
RETURNING user_id, email, phone_number, name, password_hash, is_active, created_at, updated_at
`

type UpdateUserParams struct {
	UserID      uuid.UUID      `json:"user_id"`
	Name        string         `json:"name"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) (User, error) {
	row := db.QueryRowContext(ctx, updateUser, arg.UserID, arg.Name, arg.PhoneNumber)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PhoneNumber,
		&i.Name,
		&i.PasswordHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET
    password_hash = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type UpdateUserPasswordParams struct {
	UserID       uuid.UUID `json:"user_id"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, db DBTX, arg UpdateUserPasswordParams) error {
	_, err := db.ExecContext(ctx, updateUserPassword, arg.UserID, arg.PasswordHash)
	return err
}
