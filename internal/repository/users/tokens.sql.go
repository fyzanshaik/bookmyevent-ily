// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tokens.sql

package users

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const cleanupExpiredTokens = `-- name: CleanupExpiredTokens :exec
DELETE FROM refresh_tokens
WHERE expires_at < CURRENT_TIMESTAMP OR revoked_at IS NOT NULL
`

func (q *Queries) CleanupExpiredTokens(ctx context.Context, db DBTX) error {
	_, err := db.ExecContext(ctx, cleanupExpiredTokens)
	return err
}

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (
    token,
    user_id,
    expires_at
) VALUES (
    $1, $2, $3
) RETURNING token, user_id, expires_at, revoked_at, created_at, updated_at
`

type CreateRefreshTokenParams struct {
	Token     string    `json:"token"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, db DBTX, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token, user_id, expires_at, revoked_at, created_at, updated_at FROM refresh_tokens
WHERE token = $1 AND expires_at > CURRENT_TIMESTAMP AND revoked_at IS NULL
`

func (q *Queries) GetRefreshToken(ctx context.Context, db DBTX, token string) (RefreshToken, error) {
	row := db.QueryRowContext(ctx, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const revokeAllUserTokens = `-- name: RevokeAllUserTokens :exec
UPDATE refresh_tokens
SET 
    revoked_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1 AND revoked_at IS NULL
`

func (q *Queries) RevokeAllUserTokens(ctx context.Context, db DBTX, userID uuid.UUID) error {
	_, err := db.ExecContext(ctx, revokeAllUserTokens, userID)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET 
    revoked_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, db DBTX, token string) error {
	_, err := db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
