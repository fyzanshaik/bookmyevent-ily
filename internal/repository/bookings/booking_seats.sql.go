// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: booking_seats.sql

package bookings

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBookingSeat = `-- name: CreateBookingSeat :one
INSERT INTO booking_seats (
    booking_id, seat_number, seat_row, seat_section, status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING booking_seat_id, booking_id, seat_number, seat_row, seat_section, status, created_at, updated_at
`

type CreateBookingSeatParams struct {
	BookingID   uuid.UUID      `json:"booking_id"`
	SeatNumber  sql.NullString `json:"seat_number"`
	SeatRow     sql.NullString `json:"seat_row"`
	SeatSection sql.NullString `json:"seat_section"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) CreateBookingSeat(ctx context.Context, db DBTX, arg CreateBookingSeatParams) (BookingSeat, error) {
	row := db.QueryRowContext(ctx, createBookingSeat,
		arg.BookingID,
		arg.SeatNumber,
		arg.SeatRow,
		arg.SeatSection,
		arg.Status,
	)
	var i BookingSeat
	err := row.Scan(
		&i.BookingSeatID,
		&i.BookingID,
		&i.SeatNumber,
		&i.SeatRow,
		&i.SeatSection,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBookingSeats = `-- name: DeleteBookingSeats :exec
DELETE FROM booking_seats WHERE booking_id = $1
`

func (q *Queries) DeleteBookingSeats(ctx context.Context, db DBTX, bookingID uuid.UUID) error {
	_, err := db.ExecContext(ctx, deleteBookingSeats, bookingID)
	return err
}

const getBookingSeat = `-- name: GetBookingSeat :one
SELECT booking_seat_id, booking_id, seat_number, seat_row, seat_section, status, created_at, updated_at FROM booking_seats WHERE booking_seat_id = $1
`

func (q *Queries) GetBookingSeat(ctx context.Context, db DBTX, bookingSeatID uuid.UUID) (BookingSeat, error) {
	row := db.QueryRowContext(ctx, getBookingSeat, bookingSeatID)
	var i BookingSeat
	err := row.Scan(
		&i.BookingSeatID,
		&i.BookingID,
		&i.SeatNumber,
		&i.SeatRow,
		&i.SeatSection,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBookingSeats = `-- name: GetBookingSeats :many
SELECT booking_seat_id, booking_id, seat_number, seat_row, seat_section, status, created_at, updated_at FROM booking_seats WHERE booking_id = $1
`

func (q *Queries) GetBookingSeats(ctx context.Context, db DBTX, bookingID uuid.UUID) ([]BookingSeat, error) {
	rows, err := db.QueryContext(ctx, getBookingSeats, bookingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BookingSeat{}
	for rows.Next() {
		var i BookingSeat
		if err := rows.Scan(
			&i.BookingSeatID,
			&i.BookingID,
			&i.SeatNumber,
			&i.SeatRow,
			&i.SeatSection,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookingSeatsCount = `-- name: GetBookingSeatsCount :one
SELECT COUNT(*) FROM booking_seats WHERE booking_id = $1
`

func (q *Queries) GetBookingSeatsCount(ctx context.Context, db DBTX, bookingID uuid.UUID) (int64, error) {
	row := db.QueryRowContext(ctx, getBookingSeatsCount, bookingID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSeatsBySection = `-- name: GetSeatsBySection :many
SELECT booking_seat_id, booking_id, seat_number, seat_row, seat_section, status, created_at, updated_at FROM booking_seats 
WHERE booking_id = $1 AND seat_section = $2
`

type GetSeatsBySectionParams struct {
	BookingID   uuid.UUID      `json:"booking_id"`
	SeatSection sql.NullString `json:"seat_section"`
}

func (q *Queries) GetSeatsBySection(ctx context.Context, db DBTX, arg GetSeatsBySectionParams) ([]BookingSeat, error) {
	rows, err := db.QueryContext(ctx, getSeatsBySection, arg.BookingID, arg.SeatSection)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BookingSeat{}
	for rows.Next() {
		var i BookingSeat
		if err := rows.Scan(
			&i.BookingSeatID,
			&i.BookingID,
			&i.SeatNumber,
			&i.SeatRow,
			&i.SeatSection,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookingSeatStatus = `-- name: UpdateBookingSeatStatus :one
UPDATE booking_seats 
SET status = $2, updated_at = CURRENT_TIMESTAMP
WHERE booking_seat_id = $1 
RETURNING booking_seat_id, booking_id, seat_number, seat_row, seat_section, status, created_at, updated_at
`

type UpdateBookingSeatStatusParams struct {
	BookingSeatID uuid.UUID      `json:"booking_seat_id"`
	Status        sql.NullString `json:"status"`
}

func (q *Queries) UpdateBookingSeatStatus(ctx context.Context, db DBTX, arg UpdateBookingSeatStatusParams) (BookingSeat, error) {
	row := db.QueryRowContext(ctx, updateBookingSeatStatus, arg.BookingSeatID, arg.Status)
	var i BookingSeat
	err := row.Scan(
		&i.BookingSeatID,
		&i.BookingID,
		&i.SeatNumber,
		&i.SeatRow,
		&i.SeatSection,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
