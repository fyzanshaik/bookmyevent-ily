// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package events

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

type Querier interface {
	// CHECK ADMIN PERMISSIONS
	//
	//  SELECT admin_id, role, permissions, is_active
	//  FROM admins
	//  WHERE admin_id = $1 AND is_active = true
	CheckAdminPermissions(ctx context.Context, adminID uuid.UUID) (CheckAdminPermissionsRow, error)
	// Check if event exists and is modifiable
	//
	//  SELECT event_id, created_by, status, version
	//  FROM events
	//  WHERE event_id = $1 AND created_by = $2
	CheckEventOwnership(ctx context.Context, arg CheckEventOwnershipParams) (CheckEventOwnershipRow, error)
	// COUNT ADMINS
	//
	//  SELECT COUNT(*) FROM admins
	CountAdmins(ctx context.Context) (int64, error)
	// COUNT PUBLISHED EVENTS (for pagination)
	//
	//  SELECT COUNT(*)
	//  FROM events e
	//  JOIN venues v ON e.venue_id = v.venue_id
	//  WHERE e.status = 'published'
	//    AND e.start_datetime > CURRENT_TIMESTAMP
	//    AND ($1::text IS NULL OR e.event_type = $1)
	//    AND ($2::text IS NULL OR v.city ILIKE '%' || $2 || '%')
	//    AND ($3::timestamp IS NULL OR e.start_datetime >= $3)
	//    AND ($4::timestamp IS NULL OR e.start_datetime <= $4)
	CountPublishedEvents(ctx context.Context, arg CountPublishedEventsParams) (int64, error)
	// COUNT VENUES (for pagination)
	//
	//  SELECT COUNT(*) FROM venues
	//  WHERE ($1::text IS NULL OR city ILIKE '%' || $1 || '%')
	//    AND ($2::text IS NULL OR state ILIKE '%' || $2 || '%')
	CountVenues(ctx context.Context, arg CountVenuesParams) (int64, error)
	// Admin Management Queries
	// CREATE ADMIN
	//
	//
	//  INSERT INTO admins (
	//      email, name, phone_number, password_hash, role, permissions
	//  ) VALUES (
	//      $1, $2, $3, $4, $5, $6
	//  )
	//  RETURNING admin_id, email, name, phone_number, role, permissions, is_active, created_at
	CreateAdmin(ctx context.Context, arg CreateAdminParams) (CreateAdminRow, error)
	// Event Management Queries with Concurrency Control
	// CREATE EVENT
	//
	//
	//  INSERT INTO events (
	//      name, description, venue_id, event_type, start_datetime, end_datetime,
	//      total_capacity, available_seats, base_price, max_tickets_per_booking,
	//      status, created_by
	//  ) VALUES (
	//      $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
	//  )
	//  RETURNING event_id, name, description, venue_id, event_type, start_datetime, end_datetime, total_capacity, available_seats, base_price, max_tickets_per_booking, status, version, created_by, created_at, updated_at
	CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error)
	// Venue Management Queries
	// CREATE VENUE
	//
	//
	//  INSERT INTO venues (
	//      name, address, city, state, country, postal_code, capacity, layout_config
	//  ) VALUES (
	//      $1, $2, $3, $4, $5, $6, $7, $8
	//  )
	//  RETURNING venue_id, name, address, city, state, country, postal_code, capacity, layout_config, created_at, updated_at
	CreateVenue(ctx context.Context, arg CreateVenueParams) (Venue, error)
	// DEACTIVATE ADMIN
	//
	//  UPDATE admins
	//  SET is_active = false, updated_at = CURRENT_TIMESTAMP
	//  WHERE admin_id = $1
	DeactivateAdmin(ctx context.Context, adminID uuid.UUID) error
	// DELETE EVENT (Admin)
	//
	//  UPDATE events
	//  SET status = 'cancelled',
	//      updated_at = CURRENT_TIMESTAMP,
	//      version = version + 1
	//  WHERE event_id = $1
	//    AND version = $2
	DeleteEvent(ctx context.Context, arg DeleteEventParams) error
	// DELETE VENUE
	//
	//  DELETE FROM venues WHERE venue_id = $1
	DeleteVenue(ctx context.Context, venueID uuid.UUID) error
	// GET ADMIN BY EMAIL (for login)
	//
	//  SELECT admin_id, email, name, phone_number, password_hash, role, permissions, is_active, created_at, updated_at FROM admins
	//  WHERE email = $1 AND is_active = true
	GetAdminByEmail(ctx context.Context, email string) (Admin, error)
	// GET ADMIN BY ID
	//
	//  SELECT admin_id, email, name, phone_number, role, permissions, is_active, created_at, updated_at
	//  FROM admins
	//  WHERE admin_id = $1
	GetAdminByID(ctx context.Context, adminID uuid.UUID) (GetAdminByIDRow, error)
	// GET EVENT ANALYTICS (Admin)
	//
	//  SELECT
	//      e.event_id,
	//      e.name,
	//      e.total_capacity,
	//      e.available_seats,
	//      (e.total_capacity - e.available_seats) as tickets_sold,
	//      ROUND(((e.total_capacity - e.available_seats)::decimal / e.total_capacity::decimal) * 100, 2) as capacity_utilization,
	//      e.base_price,
	//      ((e.total_capacity - e.available_seats) * e.base_price) as estimated_revenue
	//  FROM events e
	//  WHERE e.event_id = $1
	GetEventAnalytics(ctx context.Context, eventID uuid.UUID) (GetEventAnalyticsRow, error)
	// GET EVENT BY ID
	//
	//  SELECT e.event_id, e.name, e.description, e.venue_id, e.event_type, e.start_datetime, e.end_datetime, e.total_capacity, e.available_seats, e.base_price, e.max_tickets_per_booking, e.status, e.version, e.created_by, e.created_at, e.updated_at, v.name as venue_name, v.address, v.city, v.state, v.country
	//  FROM events e
	//  JOIN venues v ON e.venue_id = v.venue_id
	//  WHERE e.event_id = $1
	GetEventByID(ctx context.Context, eventID uuid.UUID) (GetEventByIDRow, error)
	// CRITICAL: Get Event for Booking (with row-level lock)
	//
	//  SELECT event_id, available_seats, total_capacity, max_tickets_per_booking,
	//         status, version, base_price, name
	//  FROM events
	//  WHERE event_id = $1
	//    AND status = 'published'
	//    AND available_seats > 0
	//  FOR UPDATE
	GetEventForBooking(ctx context.Context, eventID uuid.UUID) (GetEventForBookingRow, error)
	// GET VENUE BY ID
	//
	//  SELECT venue_id, name, address, city, state, country, postal_code, capacity, layout_config, created_at, updated_at FROM venues WHERE venue_id = $1
	GetVenueByID(ctx context.Context, venueID uuid.UUID) (Venue, error)
	// GET VENUES BY CITY (for event creation dropdown)
	//
	//  SELECT venue_id, name, capacity, address FROM venues
	//  WHERE city = $1
	//  ORDER BY name
	GetVenuesByCity(ctx context.Context, city string) ([]GetVenuesByCityRow, error)
	// LIST ADMINS (Super Admin only)
	//
	//  SELECT admin_id, email, name, phone_number, role, is_active, created_at
	//  FROM admins
	//  ORDER BY created_at DESC
	//  LIMIT $1 OFFSET $2
	ListAdmins(ctx context.Context, arg ListAdminsParams) ([]ListAdminsRow, error)
	// LIST EVENTS BY ADMIN
	//
	//  SELECT e.event_id, e.name, e.description, e.venue_id, e.event_type, e.start_datetime, e.end_datetime, e.total_capacity, e.available_seats, e.base_price, e.max_tickets_per_booking, e.status, e.version, e.created_by, e.created_at, e.updated_at, v.name as venue_name, v.city
	//  FROM events e
	//  JOIN venues v ON e.venue_id = v.venue_id
	//  WHERE e.created_by = $3
	//  ORDER BY e.created_at DESC
	//  LIMIT $1 OFFSET $2
	ListEventsByAdmin(ctx context.Context, arg ListEventsByAdminParams) ([]ListEventsByAdminRow, error)
	// LIST PUBLISHED EVENTS (Public API - High Traffic)
	//
	//  SELECT e.event_id, e.name, e.description, e.venue_id, e.event_type, e.start_datetime, e.end_datetime, e.total_capacity, e.available_seats, e.base_price, e.max_tickets_per_booking, e.status, e.version, e.created_by, e.created_at, e.updated_at, v.name as venue_name, v.city, v.state
	//  FROM events e
	//  JOIN venues v ON e.venue_id = v.venue_id
	//  WHERE e.status = 'published'
	//    AND e.start_datetime > CURRENT_TIMESTAMP
	//    AND ($3::text IS NULL OR e.event_type = $3)
	//    AND ($4::text IS NULL OR v.city ILIKE '%' || $4 || '%')
	//    AND ($5::timestamp IS NULL OR e.start_datetime >= $5)
	//    AND ($6::timestamp IS NULL OR e.start_datetime <= $6)
	//  ORDER BY e.start_datetime ASC
	//  LIMIT $1 OFFSET $2
	ListPublishedEvents(ctx context.Context, arg ListPublishedEventsParams) ([]ListPublishedEventsRow, error)
	// LIST VENUES
	//
	//  SELECT venue_id, name, address, city, state, country, postal_code, capacity, layout_config, created_at, updated_at FROM venues
	//  WHERE ($3::text IS NULL OR city ILIKE '%' || $3 || '%')
	//    AND ($4::text IS NULL OR state ILIKE '%' || $4 || '%')
	//  ORDER BY name
	//  LIMIT $1 OFFSET $2
	ListVenues(ctx context.Context, arg ListVenuesParams) ([]Venue, error)
	// CRITICAL: Return Seats (for cancellations)
	//
	//  UPDATE events
	//  SET available_seats = available_seats + $2,
	//      version = version + 1,
	//      updated_at = CURRENT_TIMESTAMP,
	//      status = CASE
	//          WHEN status = 'sold_out' AND (available_seats + $2) > 0 THEN 'published'::text
	//          ELSE status
	//      END
	//  WHERE event_id = $1
	//    AND version = $3
	//  RETURNING event_id, available_seats, status, version
	ReturnEventSeats(ctx context.Context, arg ReturnEventSeatsParams) (ReturnEventSeatsRow, error)
	// SEARCH VENUES
	//
	//  SELECT venue_id, name, address, city, state, country, postal_code, capacity, layout_config, created_at, updated_at FROM venues
	//  WHERE name ILIKE '%' || $1 || '%'
	//     OR city ILIKE '%' || $1 || '%'
	//     OR address ILIKE '%' || $1 || '%'
	//  ORDER BY
	//      CASE WHEN name ILIKE $1 || '%' THEN 1 ELSE 2 END,
	//      name
	//  LIMIT 10
	SearchVenues(ctx context.Context, dollar_1 sql.NullString) ([]Venue, error)
	// UPDATE ADMIN PERMISSIONS (Super Admin only)
	//
	//  UPDATE admins
	//  SET role = COALESCE($2, role),
	//      permissions = COALESCE($3, permissions),
	//      is_active = COALESCE($4, is_active),
	//      updated_at = CURRENT_TIMESTAMP
	//  WHERE admin_id = $1
	//  RETURNING admin_id, email, name, phone_number, role, permissions, is_active, created_at, updated_at
	UpdateAdminPermissions(ctx context.Context, arg UpdateAdminPermissionsParams) (UpdateAdminPermissionsRow, error)
	// UPDATE ADMIN PROFILE
	//
	//  UPDATE admins
	//  SET name = COALESCE($2, name),
	//      phone_number = COALESCE($3, phone_number),
	//      updated_at = CURRENT_TIMESTAMP
	//  WHERE admin_id = $1 AND is_active = true
	//  RETURNING admin_id, email, name, phone_number, role, permissions, is_active, created_at, updated_at
	UpdateAdminProfile(ctx context.Context, arg UpdateAdminProfileParams) (UpdateAdminProfileRow, error)
	// UPDATE EVENT (Admin)
	//
	//  UPDATE events
	//  SET name = COALESCE($2, name),
	//      description = COALESCE($3, description),
	//      venue_id = COALESCE($4, venue_id),
	//      event_type = COALESCE($5, event_type),
	//      start_datetime = COALESCE($6, start_datetime),
	//      end_datetime = COALESCE($7, end_datetime),
	//      total_capacity = COALESCE($8, total_capacity),
	//      available_seats = COALESCE($9, available_seats),
	//      base_price = COALESCE($10, base_price),
	//      max_tickets_per_booking = COALESCE($11, max_tickets_per_booking),
	//      status = COALESCE($12, status),
	//      updated_at = CURRENT_TIMESTAMP,
	//      version = version + 1
	//  WHERE event_id = $1
	//    AND version = $13
	//  RETURNING event_id, name, description, venue_id, event_type, start_datetime, end_datetime, total_capacity, available_seats, base_price, max_tickets_per_booking, status, version, created_by, created_at, updated_at
	UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error)
	// CRITICAL: Update Available Seats with Optimistic Locking
	//
	//  UPDATE events
	//  SET available_seats = available_seats - $2,
	//      version = version + 1,
	//      updated_at = CURRENT_TIMESTAMP,
	//      status = CASE
	//          WHEN (available_seats - $2) = 0 THEN 'sold_out'::text
	//          ELSE status
	//      END
	//  WHERE event_id = $1
	//    AND version = $3
	//    AND available_seats >= $2
	//  RETURNING event_id, available_seats, status, version
	UpdateEventAvailability(ctx context.Context, arg UpdateEventAvailabilityParams) (UpdateEventAvailabilityRow, error)
	// UPDATE VENUE
	//
	//  UPDATE venues
	//  SET name = COALESCE($2, name),
	//      address = COALESCE($3, address),
	//      city = COALESCE($4, city),
	//      state = COALESCE($5, state),
	//      country = COALESCE($6, country),
	//      postal_code = COALESCE($7, postal_code),
	//      capacity = COALESCE($8, capacity),
	//      layout_config = COALESCE($9, layout_config),
	//      updated_at = CURRENT_TIMESTAMP
	//  WHERE venue_id = $1
	//  RETURNING venue_id, name, address, city, state, country, postal_code, capacity, layout_config, created_at, updated_at
	UpdateVenue(ctx context.Context, arg UpdateVenueParams) (Venue, error)
}

var _ Querier = (*Queries)(nil)
