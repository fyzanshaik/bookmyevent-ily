// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: admins.sql

package events

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const checkAdminPermissions = `-- name: CheckAdminPermissions :one
SELECT admin_id, role, permissions, is_active
FROM admins 
WHERE admin_id = $1 AND is_active = true
`

type CheckAdminPermissionsRow struct {
	AdminID     uuid.UUID             `json:"admin_id"`
	Role        sql.NullString        `json:"role"`
	Permissions pqtype.NullRawMessage `json:"permissions"`
	IsActive    sql.NullBool          `json:"is_active"`
}

// CHECK ADMIN PERMISSIONS
//
//	SELECT admin_id, role, permissions, is_active
//	FROM admins
//	WHERE admin_id = $1 AND is_active = true
func (q *Queries) CheckAdminPermissions(ctx context.Context, adminID uuid.UUID) (CheckAdminPermissionsRow, error) {
	row := q.db.QueryRowContext(ctx, checkAdminPermissions, adminID)
	var i CheckAdminPermissionsRow
	err := row.Scan(
		&i.AdminID,
		&i.Role,
		&i.Permissions,
		&i.IsActive,
	)
	return i, err
}

const countAdmins = `-- name: CountAdmins :one
SELECT COUNT(*) FROM admins
`

// COUNT ADMINS
//
//	SELECT COUNT(*) FROM admins
func (q *Queries) CountAdmins(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAdmins)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAdmin = `-- name: CreateAdmin :one

INSERT INTO admins (
    email, name, phone_number, password_hash, role, permissions
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING admin_id, email, name, phone_number, role, permissions, is_active, created_at
`

type CreateAdminParams struct {
	Email        string                `json:"email"`
	Name         string                `json:"name"`
	PhoneNumber  sql.NullString        `json:"phone_number"`
	PasswordHash string                `json:"password_hash"`
	Role         sql.NullString        `json:"role"`
	Permissions  pqtype.NullRawMessage `json:"permissions"`
}

type CreateAdminRow struct {
	AdminID     uuid.UUID             `json:"admin_id"`
	Email       string                `json:"email"`
	Name        string                `json:"name"`
	PhoneNumber sql.NullString        `json:"phone_number"`
	Role        sql.NullString        `json:"role"`
	Permissions pqtype.NullRawMessage `json:"permissions"`
	IsActive    sql.NullBool          `json:"is_active"`
	CreatedAt   sql.NullTime          `json:"created_at"`
}

// Admin Management Queries
// CREATE ADMIN
//
//	INSERT INTO admins (
//	    email, name, phone_number, password_hash, role, permissions
//	) VALUES (
//	    $1, $2, $3, $4, $5, $6
//	)
//	RETURNING admin_id, email, name, phone_number, role, permissions, is_active, created_at
func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (CreateAdminRow, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.Email,
		arg.Name,
		arg.PhoneNumber,
		arg.PasswordHash,
		arg.Role,
		arg.Permissions,
	)
	var i CreateAdminRow
	err := row.Scan(
		&i.AdminID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.Role,
		&i.Permissions,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const deactivateAdmin = `-- name: DeactivateAdmin :exec
UPDATE admins 
SET is_active = false, updated_at = CURRENT_TIMESTAMP
WHERE admin_id = $1
`

// DEACTIVATE ADMIN
//
//	UPDATE admins
//	SET is_active = false, updated_at = CURRENT_TIMESTAMP
//	WHERE admin_id = $1
func (q *Queries) DeactivateAdmin(ctx context.Context, adminID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deactivateAdmin, adminID)
	return err
}

const getAdminByEmail = `-- name: GetAdminByEmail :one
SELECT admin_id, email, name, phone_number, password_hash, role, permissions, is_active, created_at, updated_at FROM admins 
WHERE email = $1 AND is_active = true
`

// GET ADMIN BY EMAIL (for login)
//
//	SELECT admin_id, email, name, phone_number, password_hash, role, permissions, is_active, created_at, updated_at FROM admins
//	WHERE email = $1 AND is_active = true
func (q *Queries) GetAdminByEmail(ctx context.Context, email string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByEmail, email)
	var i Admin
	err := row.Scan(
		&i.AdminID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.Role,
		&i.Permissions,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminByID = `-- name: GetAdminByID :one
SELECT admin_id, email, name, phone_number, role, permissions, is_active, created_at, updated_at
FROM admins 
WHERE admin_id = $1
`

type GetAdminByIDRow struct {
	AdminID     uuid.UUID             `json:"admin_id"`
	Email       string                `json:"email"`
	Name        string                `json:"name"`
	PhoneNumber sql.NullString        `json:"phone_number"`
	Role        sql.NullString        `json:"role"`
	Permissions pqtype.NullRawMessage `json:"permissions"`
	IsActive    sql.NullBool          `json:"is_active"`
	CreatedAt   sql.NullTime          `json:"created_at"`
	UpdatedAt   sql.NullTime          `json:"updated_at"`
}

// GET ADMIN BY ID
//
//	SELECT admin_id, email, name, phone_number, role, permissions, is_active, created_at, updated_at
//	FROM admins
//	WHERE admin_id = $1
func (q *Queries) GetAdminByID(ctx context.Context, adminID uuid.UUID) (GetAdminByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAdminByID, adminID)
	var i GetAdminByIDRow
	err := row.Scan(
		&i.AdminID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.Role,
		&i.Permissions,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT admin_id, email, name, phone_number, role, is_active, created_at
FROM admins
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAdminsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAdminsRow struct {
	AdminID     uuid.UUID      `json:"admin_id"`
	Email       string         `json:"email"`
	Name        string         `json:"name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Role        sql.NullString `json:"role"`
	IsActive    sql.NullBool   `json:"is_active"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

// LIST ADMINS (Super Admin only)
//
//	SELECT admin_id, email, name, phone_number, role, is_active, created_at
//	FROM admins
//	ORDER BY created_at DESC
//	LIMIT $1 OFFSET $2
func (q *Queries) ListAdmins(ctx context.Context, arg ListAdminsParams) ([]ListAdminsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAdmins, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAdminsRow{}
	for rows.Next() {
		var i ListAdminsRow
		if err := rows.Scan(
			&i.AdminID,
			&i.Email,
			&i.Name,
			&i.PhoneNumber,
			&i.Role,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdminPermissions = `-- name: UpdateAdminPermissions :one
UPDATE admins 
SET role = COALESCE($2, role),
    permissions = COALESCE($3, permissions),
    is_active = COALESCE($4, is_active),
    updated_at = CURRENT_TIMESTAMP
WHERE admin_id = $1
RETURNING admin_id, email, name, phone_number, role, permissions, is_active, created_at, updated_at
`

type UpdateAdminPermissionsParams struct {
	AdminID     uuid.UUID             `json:"admin_id"`
	Role        sql.NullString        `json:"role"`
	Permissions pqtype.NullRawMessage `json:"permissions"`
	IsActive    sql.NullBool          `json:"is_active"`
}

type UpdateAdminPermissionsRow struct {
	AdminID     uuid.UUID             `json:"admin_id"`
	Email       string                `json:"email"`
	Name        string                `json:"name"`
	PhoneNumber sql.NullString        `json:"phone_number"`
	Role        sql.NullString        `json:"role"`
	Permissions pqtype.NullRawMessage `json:"permissions"`
	IsActive    sql.NullBool          `json:"is_active"`
	CreatedAt   sql.NullTime          `json:"created_at"`
	UpdatedAt   sql.NullTime          `json:"updated_at"`
}

// UPDATE ADMIN PERMISSIONS (Super Admin only)
//
//	UPDATE admins
//	SET role = COALESCE($2, role),
//	    permissions = COALESCE($3, permissions),
//	    is_active = COALESCE($4, is_active),
//	    updated_at = CURRENT_TIMESTAMP
//	WHERE admin_id = $1
//	RETURNING admin_id, email, name, phone_number, role, permissions, is_active, created_at, updated_at
func (q *Queries) UpdateAdminPermissions(ctx context.Context, arg UpdateAdminPermissionsParams) (UpdateAdminPermissionsRow, error) {
	row := q.db.QueryRowContext(ctx, updateAdminPermissions,
		arg.AdminID,
		arg.Role,
		arg.Permissions,
		arg.IsActive,
	)
	var i UpdateAdminPermissionsRow
	err := row.Scan(
		&i.AdminID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.Role,
		&i.Permissions,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAdminProfile = `-- name: UpdateAdminProfile :one
UPDATE admins 
SET name = COALESCE($2, name),
    phone_number = COALESCE($3, phone_number),
    updated_at = CURRENT_TIMESTAMP
WHERE admin_id = $1 AND is_active = true
RETURNING admin_id, email, name, phone_number, role, permissions, is_active, created_at, updated_at
`

type UpdateAdminProfileParams struct {
	AdminID     uuid.UUID      `json:"admin_id"`
	Name        string         `json:"name"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

type UpdateAdminProfileRow struct {
	AdminID     uuid.UUID             `json:"admin_id"`
	Email       string                `json:"email"`
	Name        string                `json:"name"`
	PhoneNumber sql.NullString        `json:"phone_number"`
	Role        sql.NullString        `json:"role"`
	Permissions pqtype.NullRawMessage `json:"permissions"`
	IsActive    sql.NullBool          `json:"is_active"`
	CreatedAt   sql.NullTime          `json:"created_at"`
	UpdatedAt   sql.NullTime          `json:"updated_at"`
}

// UPDATE ADMIN PROFILE
//
//	UPDATE admins
//	SET name = COALESCE($2, name),
//	    phone_number = COALESCE($3, phone_number),
//	    updated_at = CURRENT_TIMESTAMP
//	WHERE admin_id = $1 AND is_active = true
//	RETURNING admin_id, email, name, phone_number, role, permissions, is_active, created_at, updated_at
func (q *Queries) UpdateAdminProfile(ctx context.Context, arg UpdateAdminProfileParams) (UpdateAdminProfileRow, error) {
	row := q.db.QueryRowContext(ctx, updateAdminProfile, arg.AdminID, arg.Name, arg.PhoneNumber)
	var i UpdateAdminProfileRow
	err := row.Scan(
		&i.AdminID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.Role,
		&i.Permissions,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
