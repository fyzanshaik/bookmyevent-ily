// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: admin_refresh_tokens.sql

package events

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const cleanupExpiredAdminTokens = `-- name: CleanupExpiredAdminTokens :exec
DELETE FROM admin_refresh_tokens
WHERE expires_at < CURRENT_TIMESTAMP OR revoked_at IS NOT NULL
`

// CleanupExpiredAdminTokens
//
//	DELETE FROM admin_refresh_tokens
//	WHERE expires_at < CURRENT_TIMESTAMP OR revoked_at IS NOT NULL
func (q *Queries) CleanupExpiredAdminTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanupExpiredAdminTokens)
	return err
}

const createAdminRefreshToken = `-- name: CreateAdminRefreshToken :one
INSERT INTO admin_refresh_tokens (
    token, admin_id, expires_at
) VALUES (
    $1, $2, $3
) RETURNING token, admin_id, expires_at, revoked_at, created_at, updated_at
`

type CreateAdminRefreshTokenParams struct {
	Token     string    `json:"token"`
	AdminID   uuid.UUID `json:"admin_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

// CreateAdminRefreshToken
//
//	INSERT INTO admin_refresh_tokens (
//	    token, admin_id, expires_at
//	) VALUES (
//	    $1, $2, $3
//	) RETURNING token, admin_id, expires_at, revoked_at, created_at, updated_at
func (q *Queries) CreateAdminRefreshToken(ctx context.Context, arg CreateAdminRefreshTokenParams) (AdminRefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createAdminRefreshToken, arg.Token, arg.AdminID, arg.ExpiresAt)
	var i AdminRefreshToken
	err := row.Scan(
		&i.Token,
		&i.AdminID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminRefreshToken = `-- name: GetAdminRefreshToken :one
SELECT token, admin_id, expires_at, revoked_at, created_at, updated_at FROM admin_refresh_tokens
WHERE token = $1 AND expires_at > CURRENT_TIMESTAMP AND revoked_at IS NULL
`

// GetAdminRefreshToken
//
//	SELECT token, admin_id, expires_at, revoked_at, created_at, updated_at FROM admin_refresh_tokens
//	WHERE token = $1 AND expires_at > CURRENT_TIMESTAMP AND revoked_at IS NULL
func (q *Queries) GetAdminRefreshToken(ctx context.Context, token string) (AdminRefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getAdminRefreshToken, token)
	var i AdminRefreshToken
	err := row.Scan(
		&i.Token,
		&i.AdminID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const revokeAdminRefreshToken = `-- name: RevokeAdminRefreshToken :exec
UPDATE admin_refresh_tokens
SET
    revoked_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE token = $1
`

// RevokeAdminRefreshToken
//
//	UPDATE admin_refresh_tokens
//	SET
//	    revoked_at = CURRENT_TIMESTAMP,
//	    updated_at = CURRENT_TIMESTAMP
//	WHERE token = $1
func (q *Queries) RevokeAdminRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeAdminRefreshToken, token)
	return err
}

const revokeAllAdminTokens = `-- name: RevokeAllAdminTokens :exec
UPDATE admin_refresh_tokens
SET
    revoked_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE admin_id = $1 AND revoked_at IS NULL
`

// RevokeAllAdminTokens
//
//	UPDATE admin_refresh_tokens
//	SET
//	    revoked_at = CURRENT_TIMESTAMP,
//	    updated_at = CURRENT_TIMESTAMP
//	WHERE admin_id = $1 AND revoked_at IS NULL
func (q *Queries) RevokeAllAdminTokens(ctx context.Context, adminID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeAllAdminTokens, adminID)
	return err
}
